import subprocess

###############################################################################
##
##  Functions to set up controller
##
###############################################################################

def ch_setup():
    """Set up for generic 16 channel readout"""

    output = subprocess.check_output("16ch_setup")
    return output

def sta3800_timing():
    """Set the default CCD readout timing for the STA3800 device"""

    dialog("Setting up STA3800 default timing ...")

    dialog("Setting parallel clock delay to 6")
    par_speed(6)

    dialog("Loading serial readout signal file sta3800a.sig")
    sigload("sta3800a.sig")

    dialog("Loading default pattern file sta3800a.pat")
    patload("sta3800a.pat")

    dialog("Done.")  
    return

def sta3800_channels():
    """Set up for 16 channel readout"""
    
    output = subprocess.check_output("sta3800_channels")
    return output

def sta3800_volts():
    """Set the default voltages for the STA3800 device"""

    display("Setting up STA3800 default voltages")

    display("Setting DR13 limits for bbs switch")
    v_clk(0.0, 10.0)

    ## For use with Kirk's switch BBS supply
    sleep(0.5)
    set_bbias("Off")
    # bss(0.0) # For use with separate BSS supply

    ## Set VDD
    display("Setting VDD...")
    voltage.set_voltage(19.0, "vdd")
    sleep(0.5)

    ## Set VRD
    display("Setting VRD...")
    voltage.set_voltage(13.0, "vrd")
    sleep(0.5)
    
    ## Set VOD
    display("Setting VOD...")
    voltage.set_voltage(25.00, "vod")
    sleep(0.5)

    ## Set VOG
    display("Setting VOG...")
    voltage.set_voltage(0.0, "vog")
    sleep(0.5)

    ## Set clocks
    voltage.par_clks(-8.00, 4.00)
    voltage.ser_clks(-4.00, 6.00)
    voltage.rg(-2.00, 8.00)
    sleep(0.5)

    ## For use with Kirk's switch BBS suply
    set_bbias("On")
    # bss(0.0) # For use with separate BSS supply

    display("Done.")
    return

def sta3800_offset():
    """Set ADC channel offsets for STA3800 CCD"""

    setting_list = [4008, 3488, 3209, 4031, 4008, 4007, 3600, 136,
                    3993, 2703, 4002, 4012, 84, 4000, 3765, 4043]

    for i in range(16):
        seg_offset(i+1, setting_list[i])

    return

def gain(mode):
    """Set the gain of the SAO controller to either high or low mode"""

    output = subprocess.check_output(["gain", "{}".format(mode)])
    return output
    

def sta3800_setup():

    ch_setup()

    dialog("Setting up STA3800 ...")

    sta3800_timing()
    sta3800_channels()
    sta3800_volts()
    sta3800_offset()
    gain("high")

    dialog("Done.")

###############################################################################
##
##  Debug Code
##
###############################################################################

if __name__ == "__main__":

    pass
